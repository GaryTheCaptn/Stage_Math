from random import *

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

def jeu3p(change:bool)-> bool:
    """

    :param change: un booléen qui indique si le joueur change ou non
    :return:  un booléen indiquant si le joueur a gagné ou non.
    """
    portes = [1, 2, 3]
    choix_joueur = choice(portes)
    bonne_reponse = choice(portes)
    if change:
        return choix_joueur != bonne_reponse
    else:
        return choix_joueur == bonne_reponse


def jeukp(n:int, k:int)-> (bool,bool):
    """
    :param n: un entier indiquant le nombre de portes
    :param k: un entier indiquant le nombre de portes que le présentateur ouvre
    :return: Le tuple indiquant si le joueur aurait gagné en (changeant, sanschanger)
    """
    #J1 change toujours de porte.
    #J2 ne change jamais de porte
    portes : list[int] = [i for i in range(1,n+1)]
    bonne_reponse=choice(portes)
    choix_1 = choice(portes)
    if bonne_reponse == choix_1:
        return (False,True) #(J1 perd et J2 gagne)
    else:
            # On souhaite fournir une liste dans laquelle le joueur pourra choisir
            # aleatoirement sa porte
            # Cette liste est "portes" de laquelle on a enlevé les portes ouvertes
            # par le presentateur, de sorte que bonne_reponse soit toujours présente.
        portes.remove(choix_1)
        portes.remove(bonne_reponse)
        portes = portes[k:] # On enlève k portes parmi les portes restantes
        portes.append(bonne_reponse)
        return ((choice(portes)) == bonne_reponse, False) #J1 gagne peut-être et J2 perd



def joueN(n:int, change:bool)-> int:
    """
    :param n: le nombre de parties
    :param change: si le joueur change ou non de porte
    :return: le nombre de victoires pour n essais
    """
    nb_victoires = 0
    for i in range(n):
        if jeu3p(change):
            nb_victoires += 1
    return nb_victoires


def joueN2(essai: int, n:int, k:int) -> (int,int):
    """
    :param essai: le nombre de parties
    :param n: le nombre de portes
    :param k: le nombre de portes que le présentateur ouvre
    :return: le nombre de victoires pour les 2 stratégies possibles
    """
    nb_victoires1 = 0
    nb_victoires2 = 0
    for i in range(essai):
        donnees = jeukp(n,k)
        if donnees[0]:
            nb_victoires1 += 1
        elif donnees[1]:
            nb_victoires2 += 1
    return nb_victoires1, nb_victoires2

def affichage(n:int):
    """
    :param n: le nombre de parties jouées
    """

    victoires_change= joueN(n, True)
    tchou = victoires_change
    trump = n-victoires_change
    l1 = [trump, tchou]
    l2 = ["On ne change pas", "On change"]
    ax = plt.bar(l2, l1, color='red')
    ax[1].set_facecolor('green')
    plt.title("Répartition des victoires pour " + str(n) + " parties")
    colors = ["red", "green"]
    handles = [Rectangle((0, 0), 1, 1, color=c, ec="k") for c in colors]
    labels = [str(trump) + " victoires, soit " + str(round((trump / n) * 100, 2)) + "%",
              str(tchou) + " victoires, soit " + str(round((tchou / n) * 100, 2)) + "%"]
    plt.legend(handles, labels)
    plt.show()

def affichage2(essai:int, n:int, k:int):
    """
    :param essai: le nombre d'essais
    :param n: le nombre de portes
    :param k: le nombre de portes que l'on ouvre
    """
    res = joueN2(essai, n, k)
    tchou = res[0]
    trump = res[1]
    l1 = [trump, tchou]
    l2 = ["On ne change pas", "On change"]
    ax = plt.bar(l2, l1, color='red')
    ax[1].set_facecolor('green')
    plt.title("Répartition des victoires pour " + str(essai) + " parties à " + str(n) + " portes dont " + str(
        k) + " ouvertes.")
    colors = ["red", "green"]
    handles = [Rectangle((0, 0), 1, 1, color=c, ec="k") for c in colors]
    labels = [str(trump) + " victoires, soit " + str(round((trump / essai) * 100, 2)) + "%",
              str(tchou) + " victoires, soit " + str(round((tchou / essai) * 100, 2)) + "%"]
    plt.legend(handles, labels)
    plt.show()
